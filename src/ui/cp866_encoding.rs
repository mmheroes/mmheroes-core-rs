//! –¢–∞–±–ª–∏—Ü–∞ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏ CP866, –≤ –∫–æ—Ç–æ—Ä–æ–π –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
//! —Å —Ä–µ–∫–æ—Ä–¥–∞–º–∏. –ü–æ—á–µ–º—É –º—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å —Ä–µ–∫–æ—Ä–¥–∞–º–∏ –≤ —ç—Ç–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ?
//! –ü–æ—Ç–æ–º—É —á—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ —ç—Ç–æ –¥–µ–ª–∞–ª–∞. –≠—Ç–æ –∂–µ –∫—Ä—É—Ç–æ, –∫–æ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
//! —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∏–≥—Ä–æ–π, –ø—Ä–∞–≤–¥–∞? :)

const CHARACTER_MAP: [char; 256] = [
    // –ü–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å ASCII.
    '\x00', '\x01', '\x02', '\x03', '\x04', '\x05', '\x06', '\x07', '\x08', '\x09',
    '\x0A', '\x0B', '\x0C', '\x0D', '\x0E', '\x0F', '\x10', '\x11', '\x12', '\x13',
    '\x14', '\x15', '\x16', '\x17', '\x18', '\x19', '\x1A', '\x1B', '\x1C', '\x1D',
    '\x1E', '\x1F', '\x20', '\x21', '\x22', '\x23', '\x24', '\x25', '\x26', '\x27',
    '\x28', '\x29', '\x2A', '\x2B', '\x2C', '\x2D', '\x2E', '\x2F', '\x30', '\x31',
    '\x32', '\x33', '\x34', '\x35', '\x36', '\x37', '\x38', '\x39', '\x3A', '\x3B',
    '\x3C', '\x3D', '\x3E', '\x3F', '\x40', '\x41', '\x42', '\x43', '\x44', '\x45',
    '\x46', '\x47', '\x48', '\x49', '\x4A', '\x4B', '\x4C', '\x4D', '\x4E', '\x4F',
    '\x50', '\x51', '\x52', '\x53', '\x54', '\x55', '\x56', '\x57', '\x58', '\x59',
    '\x5A', '\x5B', '\x5C', '\x5D', '\x5E', '\x5F', '\x60', '\x61', '\x62', '\x63',
    '\x64', '\x65', '\x66', '\x67', '\x68', '\x69', '\x6A', '\x6B', '\x6C', '\x6D',
    '\x6E', '\x6F', '\x70', '\x71', '\x72', '\x73', '\x74', '\x75', '\x76', '\x77',
    '\x78', '\x79', '\x7A', '\x7B', '\x7C', '\x7D', '\x7E', '\x7F',
    // –î–∞–ª—å—à–µ –∏–¥—É—Ç –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    '–ê', '–ë', '–í', '–ì', '–î', '–ï', '–ñ', '–ó', '–ò', '–ô', '–ö', '–õ', '–ú', '–ù', '–û', '–ü', '–†',
    '–°', '–¢', '–£', '–§', '–•', '–¶', '–ß', '–®', '–©', '–™', '–´', '–¨', '–≠', '–Æ', '–Ø', '–∞', '–±',
    '–≤', '–≥', '–¥', '–µ', '–∂', '–∑', '–∏', '–π', '–∫', '–ª', '–º', '–Ω', '–æ', '–ø', '‚ñë', '‚ñí', '‚ñì',
    '‚îÇ', '‚î§', '‚ï°', '‚ï¢', '‚ïñ', '‚ïï', '‚ï£', '‚ïë', '‚ïó', '‚ïù', '‚ïú', '‚ïõ', '‚îê', '‚îî', '‚î¥', '‚î¨', '‚îú',
    '‚îÄ', '‚îº', '‚ïû', '‚ïü', '‚ïö', '‚ïî', '‚ï©', '‚ï¶', '‚ï†', '‚ïê', '‚ï¨', '‚ïß', '‚ï®', '‚ï§', '‚ï•', '‚ïô', '‚ïò',
    '‚ïí', '‚ïì', '‚ï´', '‚ï™', '‚îò', '‚îå', '‚ñà', '‚ñÑ', '‚ñå', '‚ñê', '‚ñÄ', '—Ä', '—Å', '—Ç', '—É', '—Ñ', '—Ö',
    '—Ü', '—á', '—à', '—â', '—ä', '—ã', '—å', '—ç', '—é', '—è', '–Å', '—ë', '–Ñ', '—î', '–á', '—ó', '–é',
    '—û', '¬∞', '‚àô', '¬∑', '‚àö', '‚Ññ', '¬§', '‚ñ†', ' ',
];

pub(crate) const fn char_from_cp866(cp866_encoded: u8) -> char {
    CHARACTER_MAP[cp866_encoded as usize]
}

pub(crate) fn string_from_cp866(cp866_encoded: &[u8]) -> tiny_string_ty![128] {
    cp866_encoded
        .iter()
        .cloned()
        .take_while(|&b| b != 0)
        .map(char_from_cp866)
        .collect()
}

pub(crate) fn char_to_cp866_lossy(c: char) -> u8 {
    let result = match c {
        '\x00'..='\x7F' => c as u32,
        '–ê'..='–ø' => (0x80 + (c as u32) - ('–ê' as u32)),
        '—Ä'..='—è' => (0xE0 + (c as u32) - ('—Ä' as u32)),
        '‚ñë'..='‚ñì' => (0xB0 + (c as u32) - ('‚ñë' as u32)),
        '‚îÇ' => 0xB3,
        '‚î§' => 0xB4,
        '‚ï°' => 0xB5,
        '‚ï¢' => 0xB6,
        '‚ïñ' => 0xB7,
        '‚ïï' => 0xB8,
        '‚ï£' => 0xB9,
        '‚ïë' => 0xBA,
        '‚ïó' => 0xBB,
        '‚ïù' => 0xBC,
        '‚ïú' => 0xBD,
        '‚ïõ' => 0xBE,
        '‚îê' => 0xBF,
        '‚îî' => 0xC0,
        '‚î¥' => 0xC1,
        '‚î¨' => 0xC2,
        '‚îú' => 0xC3,
        '‚îÄ' => 0xC4,
        '‚îº' => 0xC5,
        '‚ïû' => 0xC6,
        '‚ïü' => 0xC7,
        '‚ïö' => 0xC8,
        '‚ïî' => 0xC9,
        '‚ï©' => 0xCA,
        '‚ï¶' => 0xCB,
        '‚ï†' => 0xCC,
        '‚ïê' => 0xCD,
        '‚ï¨' => 0xCE,
        '‚ïß' => 0xCF,
        '‚ï®' => 0xD0,
        '‚ï§' => 0xD1,
        '‚ï•' => 0xD2,
        '‚ïô' => 0xD3,
        '‚ïò' => 0xD4,
        '‚ïí' => 0xD5,
        '‚ïì' => 0xD6,
        '‚ï´' => 0xD7,
        '‚ï™' => 0xD8,
        '‚îò' => 0xD9,
        '‚îå' => 0xDA,
        '‚ñà' => 0xDB,
        '‚ñÑ' => 0xDC,
        '‚ñå' => 0xDD,
        '‚ñê' => 0xDE,
        '‚ñÄ' => 0xDF,
        '–Å' => 0xF0,
        '—ë' => 0xF1,
        '–Ñ' => 0xF2,
        '—î' => 0xF3,
        '–á' => 0xF4,
        '—ó' => 0xF5,
        '–é' => 0xF6,
        '—û' => 0xF7,
        '¬∞' => 0xF8,
        '‚àô' => 0xF9,
        '¬∑' => 0xFA,
        '‚àö' => 0xFB,
        '‚Ññ' => 0xFC,
        '¬§' => 0xFD,
        '‚ñ†' => 0xFE,
        _ => b'?' as u32,
    };
    result as u8
}

pub(crate) fn string_to_cp866_lossy(s: &str, output: &mut [u8]) -> usize {
    let mut bytes_written = 0;
    for (input, output) in s.chars().map(char_to_cp866_lossy).zip(output.iter_mut()) {
        bytes_written += 1;
        *output = input
    }
    bytes_written
}

#[cfg(test)]
mod tests {
    use super::*;

    fn round_trip(input: &str) -> tiny_string_ty![128] {
        let mut buffer = [0u8; 128];
        string_to_cp866_lossy(input, &mut buffer);
        string_from_cp866(&buffer)
    }

    #[test]
    fn test_from_cp866_to_utf8() {
        assert_eq!(string_from_cp866(&[0x8A, 0xAE, 0xAB, 0xEF]), "–ö–æ–ª—è");
        assert_eq!(string_from_cp866(&[0x91, 0xA0, 0xE8, 0xA0]), "–°–∞—à–∞");
        assert_eq!(string_from_cp866(&[0x9D, 0xAD, 0xA4, 0xE0, 0xEE]), "–≠–Ω–¥—Ä—é");
        assert_eq!(string_from_cp866(&[0x8F, 0xA0, 0xE8, 0xA0]), "–ü–∞—à–∞");

        assert_eq!(string_from_cp866(&[b'?', 0, 0, 0]), "?");
    }

    #[test]
    fn test_from_utf8_to_cp866() {
        let mut buffer = [0u8; 5];
        string_to_cp866_lossy("–ö–æ–ª—è", &mut buffer);
        assert_eq!(buffer, [0x8A, 0xAE, 0xAB, 0xEF, 0x00]);
        buffer = [0u8; 5];
        string_to_cp866_lossy("–°–∞—à–∞", &mut buffer);
        assert_eq!(buffer, [0x91, 0xA0, 0xE8, 0xA0, 0x00]);
        buffer = [0u8; 5];
        string_to_cp866_lossy("–≠–Ω–¥—Ä—é", &mut buffer);
        assert_eq!(buffer, [0x9D, 0xAD, 0xA4, 0xE0, 0xEE]);
        buffer = [0u8; 5];
        string_to_cp866_lossy("–ü–∞—à–∞", &mut buffer);
        assert_eq!(buffer, [0x8F, 0xA0, 0xE8, 0xA0, 0x00]);
    }

    #[test]
    fn test_round_trip() {
        assert_eq!(round_trip("–õ—ë–≤–∞"), "–õ—ë–≤–∞");
        assert_eq!(
            round_trip("–°—ä–µ—à—å –∂–µ –µ—â—ë —ç—Ç–∏—Ö –º—è–≥–∫–∏—Ö —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏—Ö –±—É–ª–æ–∫, –¥–∞ –≤—ã–ø–µ–π —á–∞—é"),
            "–°—ä–µ—à—å –∂–µ –µ—â—ë —ç—Ç–∏—Ö –º—è–≥–∫–∏—Ö —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏—Ö –±—É–ª–æ–∫, –¥–∞ –≤—ã–ø–µ–π —á–∞—é"
        );
        assert_eq!(round_trip("üë©‚Äçüëß‚Äçüëß"), "?????");
        assert_eq!(round_trip("‚ñí‚ñà—ë—û‚îê‚îò"), "‚ñí‚ñà—ë—û‚îê‚îò");
    }
}

use crate::Error::{FmtError, IoError};

#[derive(Debug)]
enum Error {
    IoError(std::io::Error),
    FmtError(std::fmt::Error),
}

impl std::convert::From<std::io::Error> for Error {
    fn from(io_error: std::io::Error) -> Self {
        IoError(io_error)
    }
}

impl std::convert::From<std::fmt::Error> for Error {
    fn from(fmt_error: std::fmt::Error) -> Self {
        FmtError(fmt_error)
    }
}

fn regenerate_ios_files() -> Result<(), Error> {
    use std::fmt::Write;
    use std::io::Read;

    let mut main_manifest_file =
        std::fs::OpenOptions::new().read(true).open("Cargo.toml")?;

    let mut output = String::new();

    writeln!(
        output,
        "# Warning! This file has been autogenerated by the build script."
    )?;
    writeln!(output, "# Do not edit it manually.")?;
    writeln!(output)?;
    writeln!(
        output,
        "# This file is the same as the main Cargo.toml, but it sets the crate type"
    )?;
    writeln!(
        output,
        "# to be staticlib so it can be used by iOS clients."
    )?;
    writeln!(output)?;
    main_manifest_file.read_to_string(&mut output)?;
    writeln!(output)?;
    writeln!(output, "[lib]")?;
    writeln!(output, "name = \"mmheroes_core_ios\"")?;
    writeln!(output, "path = \"../src/lib.rs\"")?;
    writeln!(output, "crate-type = [\"staticlib\"]")?;
    writeln!(output, "required-features = [\"std\"]")?;
    writeln!(output)?;
    writeln!(
        output,
        "# Turn off unwinding so we get proper stack trace in Xcode."
    )?;
    writeln!(output, "[profile.dev]")?;
    writeln!(output, "panic = \"abort\"")?;
    writeln!(output, "[profile.release]")?;
    writeln!(output, "panic = \"abort\"")?;
    writeln!(output, "opt-level = 's'")?;
    writeln!(output, "lto = true")?;
    writeln!(output)?;

    std::fs::write("iOS/Cargo.toml", output)?;

    Ok(())
}

fn main() -> Result<(), Error> {
    println!("cargo:rerun-if-changed=build.rs");
    println!("cargo:rerun-if-changed=Cargo.toml");
    println!("cargo:rerun-if-changed=iOS/Cargo.toml");
    regenerate_ios_files()
}
